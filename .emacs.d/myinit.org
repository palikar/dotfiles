#+STARTUP: overview

#+TITLE: Configuration file for my EMACS
#+AUTHOR: Stanislav Arnaudov
#+DATE: 18-04-2018
#+EMAIL: stanislav_ts@abv.bg
#+LANGUAGE: En
#+EXPORT_FILE_NAME: config_emacs
#+CREATOR: Emacs 24.3.50.3 (Org mode 8.0.3)

* Abstract
This is the cofiguration of my EMACS-Editor written in [[https://orgmode.org/][Org mode]] in [[https://en.wikipedia.org/wiki/Literate_programming][literate style programming]]. I've sort of hoarded a lot of different packages and different =.emacs= files from all over the internet and just stucked them together.\\
Using the configuraion as is it is is not really advisable. Some things may seem weird and 'wrongly' configured, but hey...this is EMACS.\\
Still, you may found some hidden gems in here that can greatly simplify your work with the editor. I don't use =use-package= as I found that it actually makes my emacs slugish on windows and I actually prefer to have everything in my local config all the time.\\
Download the repo with
#+BEGIN_EXAMPLE
git clone https://github.com/palikar/dotfiles
#+END_EXAMPLE
and setupe emacs 
#+BEGIN_EXAMPLE
. setup-emacs.sh
#+END_EXAMPLE
* Repos and packages
The default packages repo for emacs is ELPA. ELPA is not super good, we also want ELPA. +ELPA is configured in the .emacs file but here we also add ELPA for good measures+ Everything is her now!
#+BEGIN_SRC emacs-lisp
(require 'package)
(package-initialize)

(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
(add-to-list 'package-archives '("marmalade" . "http://marmalade-repo.org/packages/") t )
(add-to-list 'package-archives '("(match-end )lpa2" . "http://www.mirrorservice.org/sites/melpa.org/packages/"))
(add-to-list 'package-archives '("melpa3" . "http://www.mirrorservice.org/sites/stable.melpa.org/packages/"))

 
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
(package-refresh-contents)
#+END_SRC
** Installing packages
I use a lot of aditional packages and like to keep them local and installed. I've tried =use-package= but I had some issues and I've opted out for installing everything. The initial waiting when setting up emacs config from scratch is fine by me.
#+BEGIN_SRC emacs-lisp
 ; all of my packages that I want in my config
(setq package-list '(alect-themes anzu atom-dark-theme auto-complete-clang auto-complete-clang-async auto-complete-nxml auto-complete auto-org-md base16-theme beacon clang-format cmake-ide color-theme-modern company-c-headers company-emacs-eclim company-irony company-jedi company-rtags crux ctags-update dashboard doom-themes drag-stuff dumb-jump eclim elpy emmet-mode evil expand-region find-file-in-project flycheck-irony function-args goto-chg haskell-mode helm-projectile helm-rtags helm helm-core highlight-indentation hungry-delete irony-eldoc irony jedi-core epc ctable concurrent latex-pretty-symbols levenshtein lorem-ipsum meghanada company moe-theme molokai-theme monokai-theme mvn neotree noflet org-bullets org-page git mustache org-pdfview org2blog htmlize metaweblog ox-hugo org ox-twbs page-break-lines pdf-tools popup pretty-mode python-environment deferred pyvenv rtags simple-httpd smart-hungry-delete smartparens solarized-theme spacemacs-theme srefactor sublimity swiper ivy syntax-subword tablist treemacs-projectile treemacs ht hydra pfuture ace-window avy projectile try undo-tree use-package bind-key virtualenvwrapper web-mode workgroups2 f s anaphora wrap-region xml-rpc yasnippet-snippets yasnippet zerodark-theme flycheck seq pkg-info epl magit magit-popup git-commit with-editor ghub let-alist dash async all-the-icons memoize markdown-mode ox-gfm iy-go-to-char smart-mode-line telephone-line))

; activate all the packages (in particular autoloads)
(package-initialize)

; fetch the list of packages available 
(unless package-archive-contents
  (package-refresh-contents))

; install the missing packages
(dolist (package package-list)
  (unless (package-installed-p package)
    (package-install package)))


#+END_SRC
* Interface tweaks
Making the whole =emacs= experience a tiny bit better with those fixes of the interface of the editor
- Startup screen is anoying
- The toolbar is wasting sapce
- =f5= should function as a refresh in firefox
- Fringes waste space
- Numbered lines come in handy
- Highlighting the current line is pretty =übersichtlich=
- Pretty sybols like \lambda over the whole place is pretty cool
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(tool-bar-mode -1)
(fset 'yes-or-no-p 'y-or-n-p)
(fringe-mode '(0 . 0))
(setq-default cursor-type 'bar)
(global-linum-mode t) 
(global-visual-line-mode 1)
(global-hl-line-mode 1)    
(global-prettify-symbols-mode +1)

#+END_SRC
* Behaiviour tweaksq
Some quick fixes for intuitinve and streight forwawrd editing. Generally I strive for the cleanest designf the interface possible so I remove a lot from the unneccesery things that come by default with EMACS.
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(delete-selection-mode 1)
(setq auto-save-default nil)
(setq backup-inhibited t)

;; (cua-mode 1) I am pretty much a big deal pro and I don't need cua-mode 8)

(load "~/.emacs.d/lisp/syntax-subword")
(global-syntax-subword-mode 1) 
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
(setq mouse-wheel-follow-mouse nil)
(setq scroll-step 1)

(setq confirm-kill-emacs 'y-or-n-p)

(setq save-interprogram-paste-before-kill t)

(global-auto-revert-mode 1) ;; you might not want this
(setq auto-revert-verbose nil) ;;or this

;;for good measures
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)

(require 'saveplace)

(put 'upcase-region 'disabled nil)
#+END_SRC
** Copy line below
Use =Alt-up/down= as in any other editor to copy lines 
#+BEGIN_SRC emacs-lisp
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)
(global-set-key [(control shift down)]  'duplicate-line)
(global-set-key [(control shift up)]  'duplicate-line)






    
#+END_SRC
** Making parantesis handy and smart
Those are pretty much a must when editing code...and also anything else
- Select region and wrap it up with a sybol
  - Cofigured with the standards
  - Cofigured with the formating of =org-mode=
- Insert a opening bracecket and the closing is inserted automagically!
#+BEGIN_SRC emacs-lisp
(require 'wrap-region)
(wrap-region-add-wrapper "=" "=")
(wrap-region-add-wrapper "/" "/")
(wrap-region-add-wrapper "_" "_")
(wrap-region-add-wrapper "+" "+")
(wrap-region-add-wrapper "*" "*")

(wrap-region-global-mode t)


(require 'smartparens)
(smartparens-global-mode 1)

#+END_SRC
** Custom key map(some if it!) 
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)

(global-set-key (kbd "C-z") 'undo)

(global-set-key (kbd "C-x r e") 'eval-region)

(global-set-key (kbd "<f5>") 'revert-buffer)

#+END_SRC
* Org-mode
** Common settings
Org-mode is awesome not just for note taking but also for general text editing, formating and all and all just plain old /writting/. Therefore some basic org-mode configuraion comes at handy when working with =.org= files (this .init file is written in org-mode so...yeah!!). The =org-bullets= makes the heading look pretty. I have couple of extra exporterrs for =.org= files that just make my life easier. 
#+BEGIN_SRC emacs-lisp
(require 'org-bullets)


(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(custom-set-variables
    '(org-directory "~/Dropbox/orgfiles")
    '(org-default-notes-file (concat org-directory "/notes.org"))
    '(org-export-html-postamble nil)
    '(org-hide-leading-stars t)
    '(org-startup-folded (quote overview))
    '(org-startup-indented t)
)

(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)

(setq org-log-done 'time)

(setq org-latex-listings 'minted
      org-latex-packages-alist '(("" "minted"))
      org-latex-pdf-process
      '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
        "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

(setq org-pretty-entities t)
#+END_SRC
The codeblocks should be formated with the native envinroment of the language
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+END_SRC 
** Exporters
Some extra export backends for org-mode that come in handy.
 - Beamer - for making those awesome-ish presentations
 - twbs(Tweeter Bootstrap) - quickly make your org files look really pretty
 - hugo - I use Hugo for blogging and the exporter allowes me to write every single content page in /org-mode/
 - gfm (Github Flavored Markdown) - this makes writing /README.md/ files easy (i.e. writing them in org-mode)
#+BEGIN_SRC emacs-lisp
(require 'ox-beamer)
(require 'ox-twbs)
(require 'ox-hugo)
(require 'ox-gfm)


#+END_SRC
** Reveal.js
This style of presenting looks cool but I don't use it that much. Still, I want to have the possibility in my emacs. 
#+BEGIN_SRC emacs-lisp
    (require 'ox-reveal)

    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)

    (require 'htmlize)
#+END_SRC
** Reloading
For some reasons I have to call this after I've /require/-d all the exporters' backends in order to make them available in the export dispatcher of /org-mode/.
#+BEGIN_SRC emacs-lisp
(require 'org)
(org-reload)

#+END_SRC
* Windowing
Couple of minor setups that make working with frames a little bit easier. In a lot of cases I just want to switch the position of two windows so there is handy function there. Also, navigating around windows can be a bit weird and slow with just using =C-x o= so =windmove= is set up to work with =C-c= and the arrow keys
#+BEGIN_SRC emacs-lisp
(defun transpose-windows (arg) ;; yes, I know, there is also a crux-function that does the exact same thing...still...!!!
   "Transpose the buffers shown in two windows."
   (interactive "p")
   (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
     (while (/= arg 0)
       (let ((this-win (window-buffer))
             (next-win (window-buffer (funcall selector))))
         (set-window-buffer (selected-window) next-win)
         (set-window-buffer (funcall selector) this-win)
         (select-window (funcall selector)))
       (setq arg (if (plusp arg) (1- arg) (1+ arg))))))

 (define-key ctl-x-4-map (kbd "t") 'transpose-windows)
 
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)
 


#+END_SRC

* Better searching
=Isearch= is great but I have ever wanted a isearch on steroids...or something with helm infused isearch. =Swiper= is exaclty that. =Anzu= is a mode line tweak that displays the number of found things by isearch but not by swiper. Yes, I should probably fix that some time in the future.
- [[https://github.com/abo-abo/swiper][Swiper]]
- [[https://github.com/syohex/emacs-anzu][Anzu]]
\\
/Note:/ I do also sometimes use /helm-occur-from-isearch/ in order to find something. I still like to have different possablities while performing an action and picking hte best one in each individual case.
#+BEGIN_SRC emacs-lisp
(require 'swiper)
(global-set-key (kbd "C-s")  'swiper)

(require 'anzu)
(global-anzu-mode +1)
(define-key isearch-mode-map [remap isearch-query-replace]  'anzu-isearch-query-replace)

#+END_SRC

* Helm goodies
The best and the most fully fledged completion engine for emacs IMO. I cannot be productive in my emacs without this. When you are in minibuffer and start typing, things just appear as you type, you can select multiple items, perform actions on all of the (example: open multiple files with single =C-x C-f=) and many more features that I should probalby use on more regular basis.
- [[https://github.com/emacs-helm/helm][helm]]
#+BEGIN_SRC emacs-lisp
(require 'helm)
(require 'helm-config)
(helm-mode 1)

(global-set-key (kbd "C-x C-f") 'helm-find-files)  
(setq helm-autoresize-max-height 0)
(setq helm-autoresize-min-height 50)
(helm-autoresize-mode 1)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-c b") 'helm-semantic-or-imenu)
(global-set-key (kbd "M-s") 'helm-projectile-grep)


;;search and install apt packages through Emacs...crazy, I know!!!
(global-set-key (kbd "C-x c C-a") 'helm-apt)
(global-set-key (kbd "C-x c M-m") 'helm-complete-file-name-at-point)

(global-set-key (kbd "C-x c C-s") 'helm-occur-from-isearch)



#+END_SRC

* Avy
Navigate by searching for a letter on the screen and jumping to it. Useful for quick navigation and getting to places on the screen.
- [[https://github.com/abo-abo/avy][avy]]
#+BEGIN_SRC emacs-lisp
(require 'avy)
(global-set-key (kbd "C-c C-f") 'avy-goto-char)
#+END_SRC
* Iy
Go to next CHAR which is similar to "f" and "t" in /vim/. To note is that I don't think that this package will remember the state of your mark when you make the jump. So if you have the expression =int funcName(int a, int b)=, the cursor is at the beginnign of the epxresison and you type =C-SPC C-c f (= you wno't mark everything till the =(=. Still useful though. 
- [[https://github.com/doitian/iy-go-to-char][iy-go-to-char]]
#+BEGIN_SRC emacs-lisp
(require 'iy-go-to-char)
(global-set-key (kbd "C-c f") 'iy-go-up-to-char)
(global-set-key (kbd "C-c F") 'iy-go-up-to-char-backward)
#+END_SRC
* Company
Complete Anything!
- [[http://company-mode.github.io/][company]]
#+BEGIN_SRC emacs-lisp
(require 'company)

 (setq company-minimum-prefix-length 2
		company-tooltip-align-annotations t
		company-tooltip-flip-when-above t
		company-idle-delay nil)

(setq company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
							company-preview-if-just-one-frontend))


(setq company-backends '(
                         company-capf          
                         company-files         
                         (
                          company-dabbrev-code 
                          company-gtags
                          company-etags
                          company-keywords
                          )
                         company-dabbrev
                         ))

(global-company-mode t)
(global-set-key (kbd "M-m") 'company-complete)


;;(add-to-list 'company-backends 'company-file)
;;(add-to-list 'company-backends 'company-dabbrev)


(defun my/nxml-mode-hook ()
  (add-to-list 'company-backends 'company-nxml))
(add-hook 'prog-mode-hook 'my/nxml-mode-hook)

(defun my/prog-mode-hook ()
  (add-to-list 'company-backends 'company-keywords))
(add-hook 'prog-mode-hook 'my/prog-mode-hook)




(require 'company-meghanada)
(defun my/meghanada-mode-hook ()
  (add-to-list 'company-backends 'company-meghanada))

(add-hook 'meghanada-mode-hook 'my/meghanada-mode-hook)




(require' company-irony)
(defun my/irony-mode-hook ()
  (add-to-list 'company-backends 'company-irony))

(add-hook 'iorny-mode-hook 'my/irony-mode-hook)



(require 'company-jedi)
(add-hook 'python-mode-hook 'jedi:setup)

(defun my/python-mode-hook ()
  (add-to-list 'company-backends 'company-jedi))

(add-hook 'python-mode-hook 'my/python-mode-hook)



#+END_SRC
* Themes
I often alternate between these two and can't really decide which is my favorite one. I depends on the day, I guess. In this case, better to gave them both at one place!
#+BEGIN_SRC emacs-lisp

(setq custom-safe-themes t)
(load-theme 'spacemacs-dark)

;; (load-theme 'monokai)
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
(require 'flycheck)  
(global-flycheck-mode t)
#+END_SRC

* Python
#+BEGIN_SRC emacs-lisp

#+END_SRC  
* Yasnippet
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
(require 'yasnippet-snippets)
#+END_SRC
* Misc packages
Those pacakges add some minor tweak to EMACS to make text editing easier.
- [[][beacon]]
- [[][hungry-delete]]
- [[][expand-region]]
- 
#+BEGIN_SRC emacs-lisp
  
  ; flashes the cursor's line when you scroll
  (require 'beacon)
  (beacon-mode 1)
  
  
  ; deletes all the whitespace when you hit backspace or delete
  (require 'hungry-delete)
  (global-hungry-delete-mode)
    
  

  ; expand the marked region in semantic increments (negative prefix to reduce region)
  (require 'expand-region)
  (global-set-key (kbd "C-c =") 'er/expand-region)


#+END_SRC
** CRUX
...is an abrabiation for /A Collection of Ridiculously Useful eXtensions for Emacs/, so yeah, pretty self-explenatory.
 -[[https://github.com/bbatsov/crux][crux]]
#+BEGIN_SRC emacs-lisp
(require 'crux)

(global-set-key (kbd "C-c o") 'crux-open-with)
(global-set-key (kbd "C-c k") 'crux-smart-kill-line)
(global-set-key (kbd "C-c r") 'crux-rename-file-and-buffer)
(global-set-key (kbd "C-c I") 'crux-find-user-init-file)
(global-set-key (kbd "C-c S") 'crux-find-shell-init-file)

(crux-reopen-as-root-mode t)
#+END_SRC

* Folding code
#+BEGIN_SRC emacs-lisp
   (add-hook 'prog-mode-hook 'hs-minor-mode)
   (global-set-key (kbd "M-[") 'hs-show-all)
   (global-set-key (kbd "M-]") 'hs-hide-all)
   (define-key input-decode-map [?\C-\[] (kbd "<C-[>"))
   (global-set-key (kbd "<C-[>") 'hs-toggle-hiding)
#+END_SRC

* C++
#+BEGIN_SRC emacs-lisp
(require' irony)
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)

#+END_SRC
* Programming
#+BEGIN_SRC emacs-lisp
(defun comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)))

(global-set-key (kbd "C-/") 'comment-or-uncomment-region-or-line)
(setq c-default-style
      '((java-mode . "java") (other . "awk")))
(setq-default c-default-style "awk")
(setq-default indent-tabs-mode nil)
(setq-default c-basic-offset 2)

(add-hook 'proge-mode-hook 'semmantic-highlight-func-mode)
(show-paren-mode 1)

(require 'function-args)
(fa-config-default)
(set-default 'semantic-case-fold t)

#+END_SRC
* Text editing
** Alt-moving selection
This is kinda of a standard feature in most text editors. I got used to it from /Netbeans/ and can't live without it. 
#+BEGIN_SRC emacs-lisp
(require 'drag-stuff)
(drag-stuff-global-mode)
(global-set-key (kbd "M-<up>") 'drag-stuff-up)
(global-set-key (kbd "M-<down>") 'drag-stuff-down)
#+END_SRC
* Web Mode
- [[https://github.com/smihica/emmet-mode][emmet-mode]] 
#+BEGIN_SRC emacs-lisp
(require 'web-mode)
(add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.api\\'" . web-mode))
(add-to-list 'auto-mode-alist '("/some/react/path/.*\\.js[x]?\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

(defun my-web-mode-hook ()
  "Hooks for Web mode."
  (setq web-mode-markup-indent-offset 2)

  (require 'emmet-mode)
  (emmet-mode 1)

  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-style-padding 1)
  (setq web-mode-script-padding 1)
  (setq web-mode-block-padding 0)

  (setq web-mode-extra-auto-pairs
      '(("erb"  . (("beg" "end")))
        ("php"  . (("beg" "end")
                   ("beg" "end")))
       ))
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-current-column-highlight t)


  (setq web-mode-ac-sources-alist
  '(("css" . (ac-source-css-property))
    ("html" . (ac-source-words-in-buffer ac-source-abbrev))))

  
  
)
(add-hook 'web-mode-hook  'my-web-mode-hook)

#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
 (require 'projectile)
 (projectile-global-mode)
 (setq projectile-completion-system 'helm)
 (global-set-key [f4] 'projectile-find-other-file)

#+END_SRC
* Neotree
#+BEGIN_SRC emacs-lisp
(require 'neotree)
(require 'all-the-icons)

(global-set-key [f1] 'neotree-toggle)
(global-set-key [f2] 'neotree-find)

(setq neo-window-fixed-size nil)
(setq neo-theme (if (display-graphic-p) 'nerd 'arrow))
(setq neo-show-hidden-files t)
(setq projectile-switch-project-action 'neotree-projectile-action)

#+END_SRC
* PDF-Tools
Viewing pdf files in emacs! Not really intented for big and heavy files but when I have to check on something is does the trick.
- [[https://github.com/politza/pdf-tools][pdf-tools]]
#+BEGIN_SRC emacs-lisp
(require 'pdf-tools)
(require 'org-pdfview)
#+END_SRC

* Pretty startup screen

#+BEGIN_SRC emacs-lisp

(require 'dashboard)

(setq dashboard-banner-logo-title "Welcome to the Emacs of Stanislav Arnaudov")
(setq dashboard-startup-banner 'official)
(setq dashboard-items '((recents  . 5)
                        (bookmarks . 5)
                        (projects . 5)
                        (agenda . 5)
                        (registers . 5)))
(dashboard-setup-startup-hook)

#+END_SRC
* Sessios persistence
#+BEGIN_SRC emacs-lisp
(require 'workgroups2)
(workgroups-mode 1)  

(setq wg-prefix-key (kbd "C-c z"))
(setq wg-session-file "~/.emacs.d/.emacs_workgroups")
(setq wg-emacs-exit-save-behavior           'save)      ; Options: 'save 'ask nil
(setq wg-workgroups-mode-exit-save-behavior 'save)      ; Options: 'save 'ask nil
(setq wg-mode-line-display-on t)          
(setq wg-flag-modified t)
(setq wg-mode-line-decor-left-brace "["
      wg-mode-line-decor-right-brace "]"
      wg-mode-line-decor-divider ":")
#+END_SRC
* Java
I don't really use EMACS for java development as it can be tedious and the packages are not really on part with some other modern IDEs (like Netbeans ;) ). Still, I do have some basic setup for =meghanada= to make my life easier if I have to edit some java program really quick through emacs.
- [[https://github.com/mopemope/meghanada-emacs][meghanada]] 
#+BEGIN_SRC emacs-lisp
(require 'meghanada)
(add-hook 'java-mode-hook
          (lambda ()
            (meghanada-mode t)
            (flycheck-mode +1)
            (setq c-basic-offset 2)
            (add-hook 'before-save-hook 'meghanada-code-beautify-before-save)))
(cond
   ((eq system-type 'windows-nt)
    (setq meghanada-java-path (expand-file-name "bin/java.exe" (getenv "JAVA_HOME")))
    (setq meghanada-maven-path "mvn.cmd"))
   (t
    (setq meghanada-java-path "java")
    (setq meghanada-maven-path "mvn")))




#+END_SRC
* Markdown
Markdown is not as pretty as Org-mode but is widely used throughout the Internet. I often have to open /.md/ files and therefore it's woorth making them look pretty in my emacs. The =markdown-mode= provies exaclty that.
-[[https://jblevins.org/projects/markdown-mode/][markdown-mode]]
#+BEGIN_SRC emacs-lisp
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.txt\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
#+END_SRC
* IBuffer

#+BEGIN_SRC emacs-lisp
(require 'ibuffer)
(require 'ibuffer-projectile)
(global-set-key (kbd "C-x C-b") 'ibuffer)
;;(autoload 'ibuffer "ibuffer" "List buffers." t)
(setq ibuffer-expert t)
(setq ibuffer-show-empty-filter-groups nil)
(add-hook 'ibuffer-mode-hook
	  '(lambda ()
	     (ibuffer-auto-mode 1)
	     (ibuffer-switch-to-saved-filter-groups "home")))



(setq ibuffer-saved-filter-groups
      '("default"
        ("Emacs" (or (filename . ".emacs")
                     ((format "message" format-args)ilename . "myinit.org")))
        ("Org" (or (mode . org-mode)
                   (filename . "OrgMode")))
        ("Code" (filename . "code"))
        ("Web Dev" (or (mode . html-mode)
                       (mode . css-mode)))
        ("Magit" (name . "\*magit"))
        ("Terminal" (or (mode . Term) 
                        (mode . Shell)))  
        ("Help" (or (name . "\*Help\*")
                    (name . "\*Apropos\*")
                    (name . "\*info\*")))
        )
      )

;;(add-hook 'ibuffer-hook
;;          (lambda ()
;;          (ibuffer-projectile-set-filter-groups)
;;            (unless (eq ibuffer-sorting-mode 'alphabetic)
;;              (ibuffer-do-sort-by-alphabetic))))


(add-hook 'ibuffer-mode-hook
          (lambda ()
            (ibuffer-switch-to-saved-filter-groups "default")))

;;(require 'ibuf-ext)
;;(add-to-list 'ibuffer-never-show-predicates "^\\*")

#+END_SRC
----------------------
* Shell
My choce of terminal envinroment in my emacs is /Terminal Emulator/(term). There are two modes to it - /char/ and /line/. Switching between them is made easier with one simple function and some custom key-bindings.
//
 May other IDEs use =EF5= for building and compiling projects and I've gotten used to that. Therefore...custom keybinding.
#+BEGIN_SRC emacs-lisp
(require 'term)

(global-set-key [f3] 'term)

(defun my/term-toggle-mode ()
  "Toggles term between line mode and char mode"
  (interactive)
  (if (term-in-line-mode)
      (term-char-mode)
    (term-line-mode)))

(define-key term-mode-map (kbd "C-c C-j") 'my/term-toggle-mode)
(define-key term-mode-map (kbd "C-c C-k") 'my/term-toggle-mode)
(define-key term-raw-map (kbd "C-c C-j") 'my/term-toggle-mode)
(define-key term-raw-map (kbd "C-c C-k") 'my/term-toggle-mode)
(global-set-key [f5] 'compile)
(global-set-key (kbd "C-<f5>") 'compile)



#+END_SRC

* Org-Babel

#+BEGIN_SRC emacs-lisp
(setq org-babel-python-command "~/anaconda3/bin/python3.6")
#+END_SRC
* Spellchecking

#+BEGIN_SRC emacs-lisp
(require 'flyspell)
(define-key flyspell-mode-map (kbd "C-c s") #'flyspell-popup-correct)
(add-hook 'flyspell-mode-hook #'flyspell-popup-auto-correct-mode)

(defun fd-switch-dictionary()
  (interactive)
  (let* ((dic ispell-current-dictionary)
    	 (change (if (string= dic "deutsch8") "english" "deutsch8")))
    (ispell-change-dictionary change)
    (message "Dictionary switched from %s to %s" dic change)
    ))

(global-set-key (kbd "<f8>")   'fd-switch-dictionary)

#+END_SRC
* GoogletThis

#+BEGIN_SRC emacs-lisp

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")

(google-this-mode 1)
(global-set-key (kbd "C-c g") 'google-this-mode-submap)

#+END_SRC
* Modline
Making the modeline a little bit prettier and more spece efficient than the default. =smart-mode-line= is the "main" package and =telephone-line= is there just to make the separators nicer.
  - [[https://github.com/dbordak/telephone-line][telephone-line]]
  - [[https://github.com/Malabarba/smart-mode-line][smart-mode-line]]
 Preview:
[[../mode-line.png]]
#+BEGIN_SRC emacs-lisp
;; (require 'smart-mode-line)
;; (require 'powerline)
;; (setq sml/no-confirm-load-theme t)
;; (sml/setup)
;; (setq sml/theme 'automatic)

(require 'telephone-line)
(telephone-line-mode t)
#+END_SRC
* Things that need to be done in the dot-files
** DONE Configure better web-mode support
CLOSED: [2018-05-02 Wed 12:53]
Is done in the config file that we use at work
** DONE Set up the key bindings for =avy=
CLOSED: [2018-05-07 Mon 16:50]
could be *REALLY* usefule
** DONE Move all the repos in one place
CLOSED: [2018-05-01 Tue 23:00]
** DONE Clean the /.emacs/ file
CLOSED: [2018-05-01 Tue 23:02]
It's pretty good now
** DONE Upload the file to a repo
CLOSED: [2018-05-01 Tue 23:03]
If you are reading this and you are not me....well, then I guess is to be marked as /DONE/!
** DONE Make an archive with the .emacs.d directory
CLOSED: [2018-05-01 Tue 23:03]
Some files of it at least!
** TODO Add annotations for everything
** TODO Put the whole thing on the blog
